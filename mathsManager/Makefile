# Ce fichier Makefile permet de d√©ployer l'application sur le serveur de production et de synchroniser les images du dossier storage

.PHONY: serve vite deploy install prod-optimize sync-images clean status help

# Variables (peuvent √™tre overrid√©es via Makefile.local ou variables d'environnement)
SERVER_USER ?= your-server-user
SERVER_HOST ?= your-server-path
PREPROD_HOST ?= your-preprod-path
PHP_BINARY ?= php
NPM_BINARY ?= npm

# Inclure les variables locales si le fichier existe (non versionn√©)
-include Makefile.local

# Exemple d'utilisation :
# 1. Cr√©er un fichier Makefile.local avec tes vraies variables (ajout√© au .gitignore)
# 2. Ou utiliser: SERVER_USER=monuser SERVER_HOST=mon.serveur.com:/path make deploy

# Aide
help:
	@echo "Commandes disponibles :"
	@echo "  serve        - Lancer le serveur de d√©veloppement PHP"
	@echo "  vite         - Lancer Vite en mode d√©veloppement"
	@echo "  deploy       - D√©ployer en production (branche main)"
	@echo "  deploy-preprod - D√©ployer en preprod (branche develop)"
	@echo "  sync-prod-to-preprod - Synchroniser la BDD prod vers preprod"
	@echo "  prod-optimize - Optimiser pour la production"
	@echo "  install      - Installer les d√©pendances"
	@echo "  sync-images  - Synchroniser les images vers la production"
	@echo "  fetch-images - R√©cup√©rer les images depuis la production"
	@echo "  clean        - Nettoyer les caches"
	@echo "  status       - Afficher le statut de l'application"

# Cible pour lancer le serveur de d√©veloppement de PHP
serve:
	$(PHP_BINARY) artisan serve

# Cible pour lancer le serveur de d√©veloppement de Vite
vite:
	$(NPM_BINARY) run dev

# Optimisations pour la production
prod-optimize:
	@echo "üöÄ Optimisation pour la production..."
	$(PHP_BINARY) artisan config:cache
	$(PHP_BINARY) artisan route:cache
	$(PHP_BINARY) artisan view:cache
	$(NPM_BINARY) run build
	@echo "‚úÖ Optimisations termin√©es"

# Cible principale de d√©ploiement
deploy: prod-optimize
	@echo "üì¶ D√©ploiement en cours..."
	@mkdir -p storage/app/public/images
	@rm -f public/hot  # Remove Vite hot file to ensure production assets are used
	rsync -avz --exclude='node_modules' --exclude='.git' --exclude='.env' --exclude='storage/logs/*' --exclude='bootstrap/cache/*' . $(SERVER_USER):$(SERVER_HOST)/
	@if [ -d "storage/app/public/images" ]; then \\
		rsync -avz storage/app/public/images/ $(SERVER_USER):$(SERVER_HOST)/public/storage/images/; \\
	else \\
		echo "‚ö†Ô∏è  Dossier images introuvable, ignor√©"; \\
	fi
	ssh $(SERVER_USER) 'cd $(SERVER_HOST) && rm -f public/hot && make install-prod && (php-8.3 artisan storage:link || echo "Storage link already exists")'
	@echo "üéâ D√©ploiement termin√© !"

# D√©ploiement preprod (branche develop)
deploy-preprod: prod-optimize
	@echo "üì¶ D√©ploiement preprod en cours..."
	@mkdir -p storage/app/public/images
	@rm -f public/hot
	rsync -avz --exclude='node_modules' --exclude='.git' --exclude='.env' --exclude='storage/logs/*' --exclude='bootstrap/cache/*' . $(SERVER_USER):$(PREPROD_HOST)/
	@if [ -d "storage/app/public/images" ]; then \\
		rsync -avz storage/app/public/images/ $(SERVER_USER):$(PREPROD_HOST)/public/storage/images/; \\
	else \\
		echo "‚ö†Ô∏è  Dossier images introuvable, ignor√©"; \\
	fi
	ssh $(SERVER_USER) 'cd $(PREPROD_HOST) && rm -f public/hot && make install-preprod && (php-8.3 artisan storage:link || echo "Storage link already exists")'
	@echo "üéâ D√©ploiement preprod termin√© !"

# Installation pour la production (sur le serveur)
install-prod: vendor/autoload.php .env public/storage
	@echo "üîß Installation en mode production..."
	@echo "üîß Fixing storage permissions..."
	chmod -R 775 storage bootstrap/cache
	@echo "üîß Setting production environment..."
	sed -i 's/APP_ENV=local/APP_ENV=production/' .env
	sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
	@echo "üîß Clearing cached config..."
	rm -rf bootstrap/cache/config.php bootstrap/cache/routes*.php bootstrap/cache/packages.php bootstrap/cache/services.php || true
	php-8.3 artisan config:clear || true
	php-8.3 artisan cache:clear || true
	php-8.3 artisan migrate --force
	php-8.3 artisan config:cache
	php-8.3 artisan route:cache
	php-8.3 artisan view:cache
	@echo "‚úÖ Installation production termin√©e"

# Installation pour la preprod (sur le serveur)
install-preprod: vendor/autoload.php .env public/storage
	@echo "üîß Installation en mode preprod..."
	@echo "üîß Fixing storage permissions..."
	chmod -R 775 storage bootstrap/cache
	@echo "üîß Setting preprod environment..."
	sed -i 's/APP_ENV=local/APP_ENV=staging/' .env
	sed -i 's/APP_DEBUG=true/APP_DEBUG=true/' .env
	@echo "üîß Clearing cached config..."
	rm -rf bootstrap/cache/config.php bootstrap/cache/routes*.php bootstrap/cache/packages.php bootstrap/cache/services.php || true
	php-8.3 artisan config:clear || true
	php-8.3 artisan cache:clear || true
	php-8.3 artisan migrate --force
	@echo "‚úÖ Installation preprod termin√©e"

# Cible pour installer les d√©pendances et effectuer la migration (d√©veloppement)
install: vendor/autoload.php .env public/storage
	$(PHP_BINARY) artisan migrate

# Cible pour g√©n√©rer le fichier .env √† partir de l'exemple et g√©n√©rer la cl√© d'application
.env:
	cp .env.example .env
	php artisan key:generate

# Cible pour cr√©er le lien symbolique du dossier storage vers public
public/storage:
	php artisan storage:link

# Installation des d√©pendances PHP avec Composer
vendor/autoload.php: composer.lock
	php-8.3 /usr/bin/composer install
	touch vendor/autoload.php

# Compilation des assets avec npm
public/build/manifest.json: package.json
	npm install
	npm run build

# Cible pour synchroniser seulement les images de storage (√† ex√©cuter manuellement si n√©cessaire)
sync-images:
	@echo "üì∏ Synchronisation des images vers la production..."
	rsync -avz storage/app/public/images/ $(SERVER_USER):$(SERVER_HOST)/public/storage/images/
	@echo "‚úÖ Images synchronis√©es vers la production"

# R√©cup√©rer les images depuis la production
fetch-images:
	@echo "üì• R√©cup√©ration des images depuis la production..."
	@mkdir -p storage/app/public/images
	rsync -avz $(SERVER_USER):$(SERVER_HOST)/public/storage/images/ storage/app/public/images/
	@echo "‚úÖ Images r√©cup√©r√©es depuis la production"

# Nettoyer les caches
clean:
	@echo "üßπ Nettoyage des caches..."
	$(PHP_BINARY) artisan cache:clear
	$(PHP_BINARY) artisan config:clear
	$(PHP_BINARY) artisan route:clear
	$(PHP_BINARY) artisan view:clear
	@echo "‚úÖ Caches nettoy√©s"

# Statut de l'application
status:
	@echo "üìä Statut de l'application :"
	$(PHP_BINARY) artisan about

# D√©ploiement rapide (sans rebuild des assets)
quick-deploy:
	@echo "‚ö° D√©ploiement rapide..."
	rsync -avz --exclude='node_modules' --exclude='.git' --exclude='.env' --exclude='storage/logs/*' . $(SERVER_USER):$(SERVER_HOST)/
	ssh $(SERVER_USER) 'cd $(SERVER_HOST) && php-8.3 artisan migrate --force && php-8.3 artisan config:cache'
	@echo "‚úÖ D√©ploiement rapide termin√©"

# Rollback (revenir √† la version pr√©c√©dente)
rollback:
	@echo "‚è™ Rollback en cours..."
	ssh $(SERVER_USER) 'cd $(SERVER_HOST) && git reset --hard HEAD~1 && php-8.3 artisan migrate:rollback && make install-prod'
	@echo "‚úÖ Rollback termin√©"

# Logs de production
logs:
	ssh $(SERVER_USER) 'tail -f $(SERVER_HOST)/storage/logs/laravel.log'

# Test des variables (pour debug)
test-vars:
	@echo "SERVER_USER: $(SERVER_USER)"
	@echo "SERVER_HOST: $(SERVER_HOST)"
	@echo "PREPROD_HOST: $(PREPROD_HOST)"

# Synchroniser la BDD de prod vers preprod
sync-prod-to-preprod:
	@echo "üîÑ Synchronisation BDD prod ‚Üí preprod..."
	ssh $(SERVER_USER) 'cd $(PREPROD_HOST) && chmod +x scripts/sync-prod-to-preprod.sh && ./scripts/sync-prod-to-preprod.sh'
	@echo "‚úÖ Synchronisation termin√©e"
